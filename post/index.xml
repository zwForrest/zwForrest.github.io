<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Welcome to zForrest</title>
    <link>https://zwForrest.github.io/post/</link>
    <description>Recent content in Posts on Welcome to zForrest</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 08 Aug 2020 12:40:48 +0800</lastBuildDate>
    
	<atom:link href="https://zwForrest.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Kubernetes] Client-go分析</title>
      <link>https://zwForrest.github.io/post/informer/</link>
      <pubDate>Sat, 08 Aug 2020 12:40:48 +0800</pubDate>
      
      <guid>https://zwForrest.github.io/post/informer/</guid>
      <description>Client-go客户端 主要介绍四种Client RESTClient是最基础的Client，它将HTTP client封装成RESTful风格</description>
    </item>
    
    <item>
      <title>[Kubernetes] pod原地升级</title>
      <link>https://zwForrest.github.io/post/inplaceupdate/</link>
      <pubDate>Wed, 10 Jun 2020 12:40:48 +0800</pubDate>
      
      <guid>https://zwForrest.github.io/post/inplaceupdate/</guid>
      <description>&lt;h2 id=&#34;kubelet原地升级实现&#34;&gt;kubelet原地升级实现&lt;/h2&gt;
&lt;p&gt;在实际的业务需求中，有很多需要能够实现原地升级。只改变镜像名称而不改变其他的配置。在现有的deployment中无法做到，而在kubelet层面其实是能做到原地升级，此时可以自定义operator来实现原地升级。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Kubernetes] Leaderection</title>
      <link>https://zwForrest.github.io/post/leaderection/</link>
      <pubDate>Wed, 30 Oct 2019 15:43:48 +0800</pubDate>
      
      <guid>https://zwForrest.github.io/post/leaderection/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;关于k8s的kube-scheduler和kube-controller-manager高可用部分，它们使用的选举机制和常用的基于中间件的方式不太一样，在k8s中是基于k8s资源来维护分布式锁。正常的情况下kube-scheduler和kube-controller-manager只有一个副本是处于正常的业务逻辑状态，其他的在一直获取锁，去竞争leader。如果因为某种原因现有的leader退出，或者获取锁失败，则会由其他副本竞争新的leader，并执行正常的业务逻辑。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zwForrest.github.io/post/clientset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zwForrest.github.io/post/clientset/</guid>
      <description>Client-go客户端 这里主要提供五种客户端 RESTClient是最基础的Client，它将HTTP client封装成RESTful风格的</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zwForrest.github.io/post/index%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zwForrest.github.io/post/index%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</guid>
      <description>Index结构分析 title: &amp;ldquo;[中文] 《长恨歌》&amp;rdquo; date: 2017-08-30T01:37:56+08:00 lastmod: 2017-08-30T01:37:56+08:00 draft: true tags: [&amp;ldquo;preview&amp;rdquo;, &amp;ldquo;中文&amp;rdquo;, &amp;ldquo;tag-1&amp;rdquo;] categories: [&amp;ldquo;中文</description>
    </item>
    
  </channel>
</rss>